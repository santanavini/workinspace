
# Sistema de Controle de Estoque de Insumos Agrícolas

Este projeto consiste em um sistema desenvolvido em Python que realiza o controle de insumos agrícolas, salvando os dados em um arquivo JSON local e também em um banco de dados Oracle.
o programa resolve um problema essencial na agricultura: o controle eficiente de insumos agrícolas, como fertilizantes, sementes e defensivos, que são fundamentais para a produção rural. 
Muitos produtores enfrentam dificuldades para acompanhar a quantidade de insumos disponíveis, o ritmo de consumo diário e o momento ideal para realizar novas compras, o que pode resultar em falta de insumos durante períodos críticos ou compra excessiva e desperdício de recursos.
A solução automatiza esse controle: calcula o estoque mínimo com base no consumo médio e tempo de entrega (lead time), informa a data ideal para realizar a próxima compra, e atualiza o estoque diariamente com base no uso. Isso permite que o produtor tenha previsibilidade, evite prejuízos e otimize a gestão de recursos, promovendo maior eficiência e produtividade na sua lavoura

## Funcionalidades

- **Adicionar insumo**: Permite o cadastro de insumos com informações como nome, fornecedor, unidade de medida, quantidade, consumo diário, tempo de entrega e cálculo automático da data de aviso para compra.
- **Editar insumo**: Permite atualizar os dados de insumos já cadastrados.
- **Remover insumo**: Permite excluir insumos da lista.
- **Verificar estoque**: Atualiza o estoque com base no consumo diário e exibe as informações detalhadas do insumo, inclusive alertas para compra.

## Como funciona

Ao adicionar um insumo, o programa calcula:
- **Estoque mínimo** com base no consumo diário e lead time.
- **Data de aviso de compra**: quando o estoque operacional atinge o estoque mínimo.
- Armazena os dados localmente (`estoque.json`) e também envia para o banco de dados Oracle.

Na verificação do estoque:
- A data de aviso de compra é atualizada automaticamente para o dia atual caso já tenha passado.

## Requisitos

- Python 3.x
- Oracle SQL Developer (para acessar o banco de dados)
- cx_Oracle (módulo Python)
- Oracle Instant Client 64-bit

OBS: 
Para possibilitar a instalação do pacote cx_Oracle, necessário para conectar o Python ao banco de dados Oracle, foi preciso instalar o Microsoft Visual C++ Build Tools por meio do Visual Studio Installer.
Isso se deve ao fato de que o cx_Oracle possui partes do código-fonte escritas em C/C++ que precisam ser compiladas no momento da instalação. O Visual C++ fornece os compiladores e ferramentas de desenvolvimento necessários para que esse processo ocorra corretamente no sistema operacional Windows.

## Instalação

### 1. Instalar o Python

Baixe o Python em: https://www.python.org/downloads/

### 2. Instalar o módulo `cx_Oracle`

```bash
pip install cx_Oracle
```

### 3. Instalar o Oracle Instant Client

Baixe os seguintes arquivos da versão 21.17 (x64):

- instantclient-basic-windows.x64-21.17.0.0.0dbru.zip
- instantclient-sdk-windows.x64-21.17.0.0.0dbru.zip

Extraia os dois para a mesma pasta, por exemplo:

```
C:\oracle\instantclient_21_17
```

Adicione o caminho dessa pasta às **Variáveis de Ambiente** do Windows:
- Clique com o botão direito em "Este Computador" > "Propriedades"
- Vá em "Configurações avançadas do sistema" > "Variáveis de ambiente"
- Em "Path", clique em "Editar" e adicione o caminho da pasta do Instant Client

### 4. Instalar o Oracle SQL Developer

Baixe e instale o Oracle SQL Developer (apenas para visualizar/testar a tabela no banco): https://www.oracle.com/tools/downloads/sqldev-downloads.html

### 5. Criar a tabela no banco Oracle

Use o SQL Developer para executar o seguinte comando SQL:

```sql
CREATE TABLE insumos_agro (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100),
    fornecedor VARCHAR2(100),
    unidade VARCHAR2(10),
    quantidade NUMBER(10,2),
    consumo NUMBER(10,2),
    lead_time NUMBER,
    estoque_minimo NUMBER(10,2),
    data_cadastro DATE,
    data_aviso_compra DATE
);
```

### 6. Conexão com banco Oracle

Certifique-se de usar os seguintes dados no código Python para conectar ao banco (estes são os dados da FIAP):

```python
username = "rm562317"
password = "100598"
dsn = "oracle.fiap.com.br/orcl"
```

> Obs: Caso deseje alterar o usuário, troque esses dados no início do script Python.

## Execução

Execute o script `controle_estoque.py` no PyCharm ou diretamente pelo terminal. O sistema irá:

- Carregar os dados do JSON (caso existam)
- Exibir o menu de opções para adicionar, editar, remover ou verificar insumos
- Atualizar automaticamente o estoque e o aviso de compra com base no tempo passado

## Observações

- Caso deseje limpar os dados de teste, basta deletar o arquivo `estoque.json` e, no SQL Developer, executar:

```sql
DELETE FROM insumos_agro;
COMMIT;
```

## Autores
#RyanCarlos_RM561677_fase2_cap6
#ThyagoPaiva_RM562049_fase2_cap6
#ViniciusSantana_RM564940_fase2_cap6
#VitorGuisso_RM562317_fase2_cap6

